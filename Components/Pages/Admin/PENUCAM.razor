@page "/evaluadores"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<h3 class="mb-3">Evaluadores - PNEUCAM</h3>
<div class="mb-3 d-flex gap-2">
    <input class="form-control" placeholder="Buscar por nombre, cédula o especialidad" @bind="searchTerm" />
    <button class="btn btn-primary" @onclick="Search">Buscar</button>
    <button class="btn btn-outline-secondary" @onclick="ClearFilter">Limpiar</button>
    <button class="btn btn-success ms-auto" @onclick="NuevoEvaluador">+ Nuevo evaluador</button>
</div>

<table class="table table-striped table-hover align-middle">
    <thead class="table-dark">
        <tr>
            <th>Nombre</th>
            <th>Cédula</th>
            <th>Especialidad</th>
            <th>Estado</th>
            <th class="text-end">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (EvaluadoresLista?.Any() != true)
        {
            <tr><td colspan="5" class="text-center">No hay evaluadores para mostrar.</td></tr>
        }
        else
        {
            @foreach (var e in EvaluadoresLista)
            {
                <tr>
                    <td>@e.NombreCompleto</td>
                    <td>@e.Cedula</td>
                    <td>@e.Especialidad</td>
                    <td>
                        @if (e.Activo)
                        {
                            <span class="badge bg-success">Activo</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Inactivo</span>
                        }
                    </td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditarEvaluador(e.Id)">Editar</button>
                        <button class="btn btn-sm btn-outline-info me-1" @onclick="() => VerDetalle(e.Id)">Ver</button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ToggleActivo(e.Id)">@((e.Activo) ? "Desactivar" : "Activar")</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private string searchTerm = string.Empty;
    private List<EvaluadorViewModel> EvaluadoresLista = new();

    protected override void OnInitialized()
    {
        // Datos de ejemplo -- reemplaza por llamada a servicio/DB
        EvaluadoresLista = new List<EvaluadorViewModel>
        {
            new() { Id = 1, NombreCompleto = "Dra. Ana Pérez", Cedula = "8-765-432", Especialidad = "Neumología", Activo = true },
            new() { Id = 2, NombreCompleto = "Dr. José Ruiz", Cedula = "8-123-456", Especialidad = "Medicina Interna", Activo = true },
            new() { Id = 3, NombreCompleto = "Dra. Carla López", Cedula = "8-555-666", Especialidad = "Psicología", Activo = false }
        };
    }

    void Search()
    {
        // Filtrado simple de ejemplo
        if (string.IsNullOrWhiteSpace(searchTerm)) { OnInitialized(); return; }
        EvaluadoresLista = EvaluadoresLista.Where(e =>
            e.NombreCompleto.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            e.Cedula.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            e.Especialidad.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
        StateHasChanged(); // AGREGADO: Para actualizar la UI
    }

    void ClearFilter() 
    { 
        searchTerm = string.Empty; 
        OnInitialized(); 
        StateHasChanged(); // AGREGADO: Para actualizar la UI
    }
    
    void NuevoEvaluador() => NavigationManager.NavigateTo("/evaluadores/nuevo");
    void EditarEvaluador(int id) => NavigationManager.NavigateTo($"/evaluadores/editar/{id}");
    void VerDetalle(int id) => NavigationManager.NavigateTo($"/evaluadores/detalle/{id}");
    
    void ToggleActivo(int id)
    {
        var ev = EvaluadoresLista.FirstOrDefault(x => x.Id == id); 
        if (ev is null) return;
        ev.Activo = !ev.Activo;
        StateHasChanged(); // AGREGADO: Para actualizar la UI
    }

    public class EvaluadorViewModel
    {
        public int Id { get; set; }
        public string NombreCompleto { get; set; } = string.Empty;
        public string Cedula { get; set; } = string.Empty;
        public string Especialidad { get; set; } = string.Empty;
        public bool Activo { get; set; }
    }
}