@using System.Linq.Expressions
@using DIGESA.Models.Entities.BDUbicaciones
@typeparam TModel
@inject IJSRuntime JSRuntime

<div class="ubicacion-selector">
    <div class="row">
        <!-- Provincia -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Provincia</label>
            <InputSelect @bind-Value="@ProvinciaId" class="form-select" @onchange="OnProvinciaChanged">
                <option value="">Seleccionar</option>
                @foreach (var p in Provincias)
                {
                    <option value="@p.ProvinciaId">@p.Nombre</option>
                }
            </InputSelect>
        </div>

        <!-- Distrito -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Distrito</label>
            <InputSelect @bind-Value="@DistritoId" class="form-select" @onchange="OnDistritoChanged">
                <option value="">Seleccionar</option>
                @foreach (var d in Distritos)
                {
                    <option value="@d.DistritoId">@d.Nombre</option>
                }
            </InputSelect>
        </div>

        <!-- Corregimiento -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Corregimiento</label>
            <InputSelect @bind-Value="@CorregimientoId" class="form-select" @onchange="OnCorregimientoChanged">
                <option value="">Seleccionar</option>
                @foreach (var c in Corregimientos)
                {
                    <option value="@c.CorregimientoId">@c.Nombre</option>
                }
            </InputSelect>
        </div>

        <!-- Instalación de Salud -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Instalación de Salud</label>
            <InputSelect @bind-Value="@InstalacionSaludId" class="form-select">
                <option value="">Seleccionar</option>
                @foreach (var i in Instalaciones)
                {
                    <option value="@i.InstalacionId">@i.Instalacion</option>
                }
            </InputSelect>
        </div>
    </div>
</div>

@code {
    [Parameter] public Expression<Func<TModel>> ForProvincia { get; set; }
    [Parameter] public Expression<Func<TModel>> ForDistrito { get; set; }
    [Parameter] public Expression<Func<TModel>> ForCorregimiento { get; set; }
    [Parameter] public Expression<Func<TModel>> ForInstalacionSalud { get; set; }

    [Parameter] public TModel Model { get; set; }

    private int? ProvinciaId { get; set; }
    private int? DistritoId { get; set; }
    private int? CorregimientoId { get; set; }
    private int? InstalacionSaludId { get; set; }

    private List<Provincia> Provincias = new();
    private List<Distrito> Distritos = new();
    private List<Corregimiento> Corregimientos = new();
    private List<InstalacionSalud> Instalaciones = new();

    [Inject] private IDbUbicacionesService UbicacionesService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProvincias();
    }

    private async Task LoadProvincias()
    {
        Provincias = await UbicacionesService.GetProvinciasAsync();
    }

    private async Task LoadDistritos()
    {
        if (ProvinciaId.HasValue)
        {
            Distritos = await UbicacionesService.GetDistritosByProvinciaAsync(ProvinciaId.Value);
            Corregimientos.Clear();
            Instalaciones.Clear();
        }
    }

    private async Task LoadCorregimientos()
    {
        if (DistritoId.HasValue)
        {
            Corregimientos = await UbicacionesService.GetCorregimientosByDistritoAsync(DistritoId.Value);
            Instalaciones.Clear();
        }
    }

    private async Task LoadInstalaciones()
    {
        if (CorregimientoId.HasValue)
        {
            Instalaciones = await UbicacionesService.GetInstalacionesByCorregimientoAsync(CorregimientoId.Value);
        }
        else if (ProvinciaId.HasValue)
        {
            Instalaciones = await UbicacionesService.GetInstalacionesByProvinciaAsync(ProvinciaId.Value);
        }
        else
        {
            Instalaciones.Clear();
        }
    }

    private async Task OnProvinciaChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            ProvinciaId = id;
            await LoadDistritos();
        }
        else
        {
            ProvinciaId = null;
            Distritos.Clear();
            Corregimientos.Clear();
            Instalaciones.Clear();
        }

        await UpdateModel();
    }

    private async Task OnDistritoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            DistritoId = id;
            await LoadCorregimientos();
        }
        else
        {
            DistritoId = null;
            Corregimientos.Clear();
        }

        await LoadInstalaciones();
        await UpdateModel();
    }

    private async Task OnCorregimientoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            CorregimientoId = id;
            await LoadInstalaciones();
        }
        else
        {
            CorregimientoId = null;
        }

        await UpdateModel();
    }

    private async Task UpdateModel()
    {
        // Aquí puedes actualizar el modelo principal si es necesario
        // Por ejemplo:
        // var provincia = Provincias.FirstOrDefault(p => p.ProvinciaId == ProvinciaId);
        // model.InstalacionSalud = provincia?.Nombre;

        await InvokeAsync(StateHasChanged);
    }
}