@using DIGESA.Models.CannabisModels
@using DIGESA.Repositorios.Interfaces
@inject ISolicitudService SolicitudService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="card shadow-sm p-3">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
        <h5 class="mb-2 mb-md-0">
            <i class="fa-solid fa-file-medical"></i> Lista de Solicitudes
        </h5>

        <div class="d-flex align-items-center gap-2">
            <label for="estadoSelect" class="form-label mb-0">Filtrar por estado:</label>
            <select id="estadoSelect" class="form-select form-select-sm" style="width: 200px;"
                    @onchange="FiltrarPorEstado">
                <option value="">Todos</option>
                @foreach (var estado in EstadosDisponibles)
                {
                    <option value="@estado" selected="@(estado == EstadoSeleccionado)">
                        @estado
                    </option>
                }
            </select>
        </div>
    </div>

    @if (SolicitudesLista is null)
    {
        <div class="text-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando solicitudes...</p>
        </div>
    }
    else if (!SolicitudesLista.Any())
    {
        <div class="alert alert-info text-center">
            No hay solicitudes con el estado seleccionado.
        </div>
    }
    else
    {
        <table class="table table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>N° Solicitud</th>
                    <th>Paciente</th>
                    <th>Cédula</th>
                    <th>Fecha Solicitud</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in SolicitudesLista)
                {
                    <tr>
                        <td>@item.NumSolCompleta</td>
                        <td>@item.PacienteNombre</td>
                        <td>@item.PacienteCedula</td>
                        <td>@item.FechaSolicitud?.ToString("dd/MM/yyyy")</td>
                        <td>
                            <span class="badge @(item.EstadoSolicitud switch
                            {
                                "Pendiente" => "bg-warning text-dark",
                                "En Revisión" => "bg-info text-dark",
                                "Aprobada" => "bg-success",
                                "Rechazada" => "bg-danger",
                                _ => "bg-secondary"
                            })">
                                @item.EstadoSolicitud
                            </span>
                        </td>
                        <td>
                            @if (item.EstadoSolicitud == "Pendiente" || item.EstadoSolicitud == "En Revisión")
                            {
                                <button class="btn btn-success btn-sm me-2" @onclick="@(() => CambiarEstado(item.Id, "Aprobada"))">
                                    <i class="fa-solid fa-check"></i> Aprobar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="@(() => CambiarEstado(item.Id, "Rechazada"))">
                                    <i class="fa-solid fa-xmark"></i> Rechazar
                                </button>
                            }
                            else
                            {
                                <span class="text-muted fst-italic">Sin acciones</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-success mt-3">@Mensaje</div>
    }
</div>

@code {
    private List<SolicitudModel>? SolicitudesLista;
    private List<string> EstadosDisponibles = new() { "Pendiente", "En Revisión", "Aprobada", "Rechazada" };
    private string? EstadoSeleccionado;
    private string? Mensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarSolicitudesAsync();
    }

    private async Task CargarSolicitudesAsync()
    {
        var todas = await SolicitudService.ObtenerSolicitudesAsync();

        if (!string.IsNullOrEmpty(EstadoSeleccionado))
            SolicitudesLista = todas.Where(s => s.EstadoSolicitud == EstadoSeleccionado).ToList();
        else
            SolicitudesLista = todas;
        
        StateHasChanged();
    }

    private async Task FiltrarPorEstado(ChangeEventArgs e)
    {
        EstadoSeleccionado = e.Value?.ToString();
        await CargarSolicitudesAsync();
    }

    private async Task CambiarEstado(int id, string nuevoEstado)
    {
        // Obtener el estado de autenticación actual
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var usuarioRevisor = authState.User.Identity?.Name ?? "Administrador";
        var comentario = $"Cambio automático al estado '{nuevoEstado}'";

        // Llamar al método con los 4 parámetros correctos
        var ok = await SolicitudService.ActualizarEstadoSolicitudAsync(id, nuevoEstado, usuarioRevisor, comentario);

        if (ok)
        {
            Mensaje = $"Solicitud {id} actualizada a '{nuevoEstado}' por {usuarioRevisor}.";
            await CargarSolicitudesAsync();
        }
        else
        {
            Mensaje = $"No se pudo actualizar la solicitud {id}.";
        }
        
        StateHasChanged();
    }
}