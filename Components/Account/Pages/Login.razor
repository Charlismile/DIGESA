@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DIGESA.Repositorios.Interfaces
@using DIGESA.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IUserData UserDataService
@inject ICommon CommonService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container">
    <div class="card card-body mx-auto my-5" style="width: min(100%, 400px);">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="LoginData" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <div class="mx-auto rounded-circle bg-flat-blue my-3 d-flex justify-content-center align-items-center"
                 style="width: 80px; height: 80px;">
                <img src="/images/logo-minsa.png" alt="lgserp" style="width: 80px; "/>
            </div>
            <ValidationSummary class="mb-0 alert alert-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="LoginData.Email" class="form-control form-control-sm rounded-3"
                           autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Correo</label>
                <ValidationMessage For="() => LoginData.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="LoginData.Password" class="form-control form-control-sm rounded-3"
                           autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Contraseña</label>
                <ValidationMessage For="() => LoginData.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="LoginData.RememberMe" class="darker-border-checkbox form-check-input" />
                    Recordarme?
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn-custom btn-primary-custom text-white">
                    <i
                        class="fa-solid fa-right-to-bracket"></i> Acceder
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code { 
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel LoginData { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is { IsAuthenticated: true })
        {
            Navigation.NavigateTo("/Admin/Indexboard");
        }
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        errorMessage = "";

        var user = await UserManager.FindByEmailAsync(LoginData.Email);
        if (user == null)
        {
            errorMessage = "Error: El usuario no está registrado en el sistema.";
            return;
        }

        if (user.IsFromActiveDirectory)
        {
            var resultado = await UserDataService.LoginAD(LoginData.Email, LoginData.Password);
            if (!resultado.Success)
            {
                errorMessage = "Error: No se pudo validar con el Active Directory.";
                return;
            }

            // Login con contraseña fake
            string fakePassword = await CommonService.GetFakePassword();
            var result = await SignInManager.PasswordSignInAsync(LoginData.Email, fakePassword, LoginData.RememberMe, lockoutOnFailure: true);

            if (result.Succeeded)
            {
                user.LastLoginDate = DateTime.Now;
                await UserManager.UpdateAsync(user);
                RedirectManager.RedirectTo("/Admin/Indexboard");
            }
            else
            {
                errorMessage = "Error: Fallo en el inicio de sesión con Active Directory.";
            }
        }
        else
        {
            // Login normal con contraseña local
            var result = await SignInManager.PasswordSignInAsync(LoginData.Email, LoginData.Password, LoginData.RememberMe, lockoutOnFailure: true);
            if (result.Succeeded)
            {
                user.LastLoginDate = DateTime.Now;
                await UserManager.UpdateAsync(user);

                if (user.MustChangePassword)
                {
                    RedirectManager.RedirectTo("/Account/Manage/Change-password?force=true");
                }
                else
                {
                    RedirectManager.RedirectTo("/Admin/Indexboard");
                }
            }
            else
            {
                errorMessage = "Error: Fallo en el inicio de sesión con Active Directory.";
            }
        }
    }
    
    private sealed class LoginModel
    {
        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Recordarme?")]
        public bool RememberMe { get; set; }
    }
}