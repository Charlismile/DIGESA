@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DIGESA.Repositorios.Interfaces
@using DIGESA.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IUserData UserDataService
@inject ICommon CommonService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container">
    <div class="card card-body mx-auto my-5" style="width: min(100%, 400px);">
        <StatusMessage Message="@errorMessage" />

        <!-- EditForm con FormName único -->
        <EditForm Model="LoginData" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <div class="mx-auto rounded-circle bg-flat-blue my-3 d-flex justify-content-center align-items-center"
                 style="width: 80px; height: 80px;">
                <img src="images/logo-minsa.png" style="width: min(100%, 80px);" alt="logo MINSA"/>
            </div>
            
            <ValidationSummary class="mb-0 alert alert-danger" role="alert" />
            
            <div class="form-floating mb-3">
                <InputText @bind-Value="LoginData.Email" class="form-control form-control-sm rounded-3"
                           autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Correo</label>
                <ValidationMessage For="() => LoginData.Email" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="LoginData.Password" class="form-control form-control-sm rounded-3"
                           autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Contraseña</label>
                <ValidationMessage For="() => LoginData.Password" class="text-danger" />
            </div>
            
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="LoginData.RememberMe" class="darker-border-checkbox form-check-input" />
                    Recordarme?
                </label>
            </div>
            
            <div>
                @if (IsAccessing)
                {
                    <button class="w-100 btn btn-lg btn-success text-white" type="button" disabled>
                        <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                        <span role="status">Accediendo...</span>
                    </button>
                }
                else
                {
                    <button type="submit" class="w-100 btn btn-lg btn-success text-white">
                        <i class="fa-solid fa-right-to-bracket"></i> Acceder
                    </button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool IsAccessing { get; set; } = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel LoginData { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is { IsAuthenticated: true })
        {
            Navigation.NavigateTo("/Indexboard", true);
        }

        IsAccessing = false;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        IsAccessing = true;
        errorMessage = null;

        var user = await UserManager.FindByEmailAsync(LoginData.Email);
        if (user == null)
        {
            errorMessage = "Error: El usuario no está registrado en el sistema.";
            IsAccessing = false;
            return;
        }

        if (user.IsFromActiveDirectory)
        {
            var resultado = await UserDataService.LoginAD(LoginData.Email, LoginData.Password);
            if (!resultado.Success)
            {
                errorMessage = "Error: No se pudo validar con el Active Directory.";
                IsAccessing = false;
                return;
            }

            // Login con contraseña fake para AD
            string fakePassword = await CommonService.GetFakePassword();
            var result = await SignInManager.PasswordSignInAsync(LoginData.Email, fakePassword, LoginData.RememberMe, lockoutOnFailure: true);

            if (result.Succeeded)
            {
                user.LastLoginDate = DateTime.Now;
                await UserManager.UpdateAsync(user);
                NavigateAfterLogin(user);
            }
            else
            {
                errorMessage = "Error: Fallo en el inicio de sesión con Active Directory.";
                IsAccessing = false;
            }
        }
        else
        {
            // Login normal con contraseña local
            var result = await SignInManager.PasswordSignInAsync(LoginData.Email, LoginData.Password, LoginData.RememberMe, lockoutOnFailure: true);
            if (result.Succeeded)
            {
                user.LastLoginDate = DateTime.Now;
                await UserManager.UpdateAsync(user);
                NavigateAfterLogin(user);
            }
            else
            {
                errorMessage = "Error: Fallo en el inicio de sesión, verifique sus credenciales.";
                IsAccessing = false;
            }
        }
    }

    private void NavigateAfterLogin(ApplicationUser user)
    {
        errorMessage = null;
        IsAccessing = false;

        if (user.MustChangePassword)
        {
            Navigation.NavigateTo("/change-password?force=true", true);
        }
        else
        {
            if (!string.IsNullOrEmpty(ReturnUrl))
                Navigation.NavigateTo(ReturnUrl!, true);
            else
                Navigation.NavigateTo("/Indexboard", true);
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress(ErrorMessage = "Ingrese un correo válido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Recordarme?")]
        public bool RememberMe { get; set; }
    }
    public async Task Logout()
    {
        await SignInManager.SignOutAsync();
        Navigation.NavigateTo("/", true); // redirige al Home
    }

}
